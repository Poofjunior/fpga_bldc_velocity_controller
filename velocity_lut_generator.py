#!/usr/bin/env python
from math import log
from math import ceil


table_size = 2048
usec_per_sec = 1000000.
ticks_per_rev = 8192
scaling_factor = 100


print "--- Tick Time to Velocity Lookup Table"
print "---   values autogenerated with Python"
print
print "--- table values are (velocity * scaling_factor)"
print "---     velocity units: [revolutions per second]"
print "---     scaling_factor = ", scaling_factor
print
print "--- Note that a tick time of zero is undefined"
print

table_start = 1
table_end = table_size

last_velocity = 0  # dummy value
last_velocity_index = 0 # dummy value


num_bits = int(ceil(log(table_end, 2)))

print "WIDTH={0};".format(14)
print "DEPTH={0};".format(table_end)
print "ADDRESS_RADIX=DEC;"
print "DATA_RADIX=DEC;"

print
print "CONTENT BEGIN"

# Print undefined value for a tick time of zero.
print "0  :  0; --- undefined"

# iterate through smallest measurable tick time (max speed) to assumed
# largest tick time (min speed)
for tick_time in range(table_start, table_end + 1):
# Calculate velocity based in time-between-encoder-ticks.
    velocity = \
          int( (usec_per_sec / (ticks_per_rev * tick_time)) * scaling_factor )

# print either the range of identical velocities or a single entry for velocity.
    if (tick_time == table_start):
        # just velocity and tick time
        last_velocity = velocity
        last_velocity_index = tick_time
    else:
# print unique velocities. Finish printing values at the end.
        if ((tick_time == table_end)  or (last_velocity != velocity)):
            # check if entry is unique.
            if (last_velocity_index == (tick_time - 1)):
                print "{0}  :  {1};".format(last_velocity_index,last_velocity)
            # entry is a range. print range of values with identical velocities.
            else:
                print "[{0}..{1}]  :  {2};"\
                    .format(last_velocity_index, tick_time - 1, last_velocity)
                last_velocity = velocity

            # Save velocity and tick time when we get a new velocity
            last_velocity = velocity
            last_velocity_index = tick_time

print "END;"
